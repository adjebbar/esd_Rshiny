source('~/git/esd/R/read.hurdat2.R')
X <- lapply(X,hur2list)
View(X)
source('~/git/esd/R/read.hurdat2.R')
load('datach.rda')
urltest <- aoml[grep('HURDAT 2',aoml)]
urldata <- substr(urltest,regexpr('href=',urltest)+6,regexpr('txt',urltest)+2)[1]
urldata <- paste('http://www.aoml.noaa.gov/hrd/hurdat/',urldata,sep='')
datach <- readLines(urldata)
load('datach.rda')
inm <- (1:length(datach))[nchar(datach)==37]
stormnames <- unlist(lapply(strsplit(datach[inm],','),function(x) x[2]))
stormnames <- gsub(' ','',stormnames)
ist <- (1:length(datach))[nchar(datach)==120]
ns <- length(stormnames)
inm <- c(inm,length(datach)+1)
for (i in 1:ns) {
datach[inm[i]:(inm[i+1]-1)] <- paste(i,stormnames[i],
datach[inm[i]:(inm[i+1]-1)],sep=',')
}
X <- strsplit(datach[ist],',')
xl <- unlist(lapply(X,function(x) length(x)))
ci <- unlist(lapply(X,function(x) as.numeric(x[1])))
table(ci)
X0 <- X
X <- lapply(X,hur2list)
d <- c(length(X),length(X[[1]]))
nms <- names(X[[1]])
X <- as.data.frame(t(matrix(unlist(X),d[2],d[1])))
names(X) <- nms
table(X$cyclone.no)
for (i in 1:ns) {
print(c(i,stormnames[i],inm[i],(inm[i+1]-1)))
datach[inm[i]:(inm[i+1]-1)] <- paste(i,stormnames[i],
datach[inm[i]:(inm[i+1]-1)],sep=',')
}
load('datach.rda')
for (i in 1:ns) {
ii <- inm[i]:(inm[i+1]-1)
print(c(i,stormnames[i],inm[i],(inm[i+1]-1)))
datach[ii] <- paste(i,stormnames[i],datach[ii],sep=',')
}
X <- strsplit(datach[ist],',')
xl <- unlist(lapply(X,function(x) length(x)))
ci <- unlist(lapply(X,function(x) as.numeric(x[1])))
if (verbose) print(table(xl))
table(ci)
X <- lapply(X,hur2list)
d <- c(length(X),length(X[[1]]))
nms <- names(X[[1]])
X <- as.data.frame(t(matrix(unlist(X),d[2],d[1])))
names(X) <- nms
Y <- matrix(rep(NA,(3*n+3)*ns),ns,3*n+3)
for (i in 1:ns) Y[i,] <- TC.track(subset(X,cyclone.no==i),n=n)
table(X$cyclone.no)
load('datach.rda')
for (i in 1:ns) {
ii <- inm[i]:(inm[i+1]-1)
print(c(i,stormnames[i],inm[i],(inm[i+1]-1)))
datach[ii] <- paste(i,stormnames[i],datach[ii],sep=',')
}
X <- strsplit(datach[ist],',')
xl <- unlist(lapply(X,function(x) length(x)))
ci <- unlist(lapply(X,function(x) as.numeric(x[1])))
table(ci)
X0 <- X
X <- lapply(X,hur2list)
X[[100]]
source('~/git/esd/R/read.hurdat2.R')
X <- X0
X <- lapply(X,hur2list)
X <- as.data.frame(t(matrix(unlist(X),d[2],d[1])))
names(X) <- nms
table(X$cyclone.no)
Y <- matrix(rep(NA,(3*n+3)*ns),ns,3*n+3)
for (i in 1:ns) Y[i,] <- TC.track(subset(X,cyclone.no==i),n=n)
source('~/git/esd/R/read.hurdat2.R')
for (i in 1:ns) Y[i,] <- TC.track(subset(X,cyclone.no==i),n=n)
length(colMeans(Y))
length(rowMeans(Y))
Y <- Y[is.finite(rowMeans(Y)),]
dim(Y)
attr(Y, "location")= NA
attr(Y, "variable")= 'storm tracks'
attr(Y, "longname")= 'Tropical cyclone storm tracks'
attr(Y, "quality")= NA
attr(Y, "calendar")= "gregorian"
attr(Y, "source")= 'NOAA/USA'
attr(Y, "URL")= url
attr(Y, "unit")= NA
attr(Y, "type")= "analysis"
attr(Y, "aspect")= "interpolated"
attr(Y, "reference")= ''
attr(Y, "info")= info
attr(Y, "method")= 'HURDAT2'
attr(Y,"lon") <- NA
attr(Y,"lat") <- NA
attr(Y,"alt") <- NA
attr(Y,"cntr") <- NA
attr(Y,"stid") <- NA
attr(Y, "history")= history.stamp()
attr(Y,'storm name') <- stormnames
class(Y) <- c('trajectory','matrix')
library(esd)
map(Y)
class(Y)
plot(Y)
map(Y,verbose=TRUE)
dim(Y)
map(Y,projection='lonlast',verbose=TRUE)
Y[1,]
Y[Y <= -999] <- NA
Y <- Y[is.finite(rowMeans(Y)),]
dim(Y)
attr(Y, "location")= NA
attr(Y, "variable")= 'storm tracks'
attr(Y, "longname")= 'Tropical cyclone storm tracks'
attr(Y, "quality")= NA
attr(Y, "calendar")= "gregorian"
attr(Y, "source")= 'NOAA/USA'
attr(Y, "URL")= url
attr(Y, "unit")= NA
attr(Y, "type")= "analysis"
attr(Y, "aspect")= "interpolated"
attr(Y, "reference")= ''
attr(Y, "info")= info
attr(Y, "method")= 'HURDAT2'
attr(Y,"lon") <- NA
attr(Y,"lat") <- NA
attr(Y,"alt") <- NA
attr(Y,"cntr") <- NA
attr(Y,"stid") <- NA
attr(Y,'storm name') <- stormnames
ok <- is.finite(rowMeans(Y))
attr(Y,'storm name') <- stormnames[ok]
class(Y) <- c('trajectory','matrix')
map(Y)
View(Y)
map(Y,verbose=TRUE)
imilast[1,]
data("imilast.M03")
imilast.M03[1,]
rownames(X) <- c(rep(lon,n),rep(lat,n),rep(slp,n),'start','end','n')
rownames(X) <- c(rep('lon',n),rep('lat',n),rep('slp',n),'start','end','n')
colnames(X) <- c(rep('lon',n),rep('lat',n),rep('slp',n),'start','end','n')
n
colnames(Y) <- c(rep('lon',n),rep('lat',n),rep('slp',n),'start','end','n')
attr(Y, "location")= NA
attr(Y, "variable")= 'storm tracks'
attr(Y, "longname")= 'Tropical cyclone storm tracks'
attr(Y, "quality")= NA
attr(Y, "calendar")= "gregorian"
attr(Y, "source")= 'NOAA/USA'
attr(Y, "URL")= url
attr(Y, "unit")= NA
attr(Y, "type")= "analysis"
attr(Y, "aspect")= "interpolated"
attr(Y, "reference")= ''
attr(Y, "info")= info
attr(Y, "method")= 'HURDAT2'
attr(Y,"lon") <- NA
attr(Y,"lat") <- NA
attr(Y,"alt") <- NA
attr(Y,"cntr") <- NA
attr(Y,"stid") <- NA
attr(Y, "history")= history.stamp()
attr(Y,'storm name') <- stormnames[ok]
class(Y) <- c('trajectory','matrix')
map(Y)
hurdat2 <- Y
save(hurdat2,file='hurdat2.rda')
map(Y,projection='lonlat')
plot(Y)
imilast.M03[1,]
source('~/git/esd/R/read.hurdat2.R')
load('datach.rda')
inm <- (1:length(datach))[nchar(datach)==37]
stormnames <- unlist(lapply(strsplit(datach[inm],','),function(x) x[2]))
stormnames <- gsub(' ','',stormnames)
ist <- (1:length(datach))[nchar(datach)==120]
ns <- length(stormnames)
inm <- c(inm,length(datach)+1)
for (i in 1:ns) {
ii <- inm[i]:(inm[i+1]-1)
print(c(i,stormnames[i],inm[i],(inm[i+1]-1)))
datach[ii] <- paste(i,stormnames[i],datach[ii],sep=',')
}
X <- strsplit(datach[ist],',')
xl <- unlist(lapply(X,function(x) length(x)))
ci <- unlist(lapply(X,function(x) as.numeric(x[1])))
if (verbose) print(table(xl))
X <- lapply(X,hur2list)
d <- c(length(X),length(X[[1]]))
nms <- names(X[[1]])
X <- as.data.frame(t(matrix(unlist(X),d[2],d[1])))
names(X) <- nms
Y <- matrix(rep(NA,(3*n+3)*ns),ns,3*n+3)
for (i in 1:ns) Y[i,] <- TC.track(subset(X,cyclone.no==i),n=n)
Y[Y <= -999] <- NA
ok <- is.finite(rowMeans(Y))
Y <- Y[ok,]
colnames(Y) <- c(rep('lon',n),rep('lat',n),rep('slp',n),'start','end','n')
attr(Y, "location")= NA
attr(Y, "variable")= 'storm tracks'
attr(Y, "longname")= 'Tropical cyclone storm tracks'
attr(Y, "quality")= NA
attr(Y, "calendar")= "gregorian"
attr(Y, "source")= 'NOAA/USA'
attr(Y, "URL")= url
attr(Y, "unit")= NA
attr(Y, "type")= "analysis"
attr(Y, "aspect")= "interpolated"
attr(Y, "reference")= ''
attr(Y, "info")= info
attr(Y, "method")= 'HURDAT2'
attr(Y,"lon") <- NA
attr(Y,"lat") <- NA
attr(Y,"alt") <- NA
attr(Y,"cntr") <- NA
attr(Y,"stid") <- NA
attr(Y, "history")= history.stamp()
attr(Y,'storm name') <- stormnames[ok]
class(Y) <- c('trajectory','matrix')
map(Y)
plot(Y)
Y[1,]
source('~/git/esd/R/read.hurdat2.R')
source('~/git/esd/R/read.hurdat2.R')
load('datach.rda')
inm <- (1:length(datach))[nchar(datach)==37]
stormnames <- unlist(lapply(strsplit(datach[inm],','),function(x) x[2]))
stormnames <- gsub(' ','',stormnames)
ist <- (1:length(datach))[nchar(datach)==120]
ns <- length(stormnames)
inm <- c(inm,length(datach)+1)
for (i in 1:ns) {
ii <- inm[i]:(inm[i+1]-1)
print(c(i,stormnames[i],inm[i],(inm[i+1]-1)))
datach[ii] <- paste(i,stormnames[i],datach[ii],sep=',')
}
X <- strsplit(datach[ist],',')
xl <- unlist(lapply(X,function(x) length(x)))
ci <- unlist(lapply(X,function(x) as.numeric(x[1])))
if (verbose) print(table(xl))
X <- lapply(X,hur2list)
d <- c(length(X),length(X[[1]]))
nms <- names(X[[1]])
X <- as.data.frame(t(matrix(unlist(X),d[2],d[1])))
names(X) <- nms
Y <- matrix(rep(NA,(3*n+3)*ns),ns,3*n+3)
for (i in 1:ns) Y[i,] <- TC.track(subset(X,cyclone.no==i),n=n)
Y[Y <= -999] <- NA
ok <- is.finite(rowMeans(Y))
Y <- Y[ok,]
colnames(Y) <- c(rep('lon',n),rep('lat',n),rep('slp',n),'start','end','n')
attr(Y, "location")= NA
attr(Y, "variable")= 'storm tracks'
attr(Y, "longname")= 'Tropical cyclone storm tracks'
attr(Y, "quality")= NA
attr(Y, "calendar")= "gregorian"
attr(Y, "source")= 'NOAA/USA'
attr(Y, "URL")= url
attr(Y, "unit")= NA
attr(Y, "type")= "analysis"
attr(Y, "aspect")= "interpolated"
attr(Y, "reference")= ''
attr(Y, "info")= info
attr(Y, "method")= 'HURDAT2'
attr(Y,"lon") <- NA
attr(Y,"lat") <- NA
attr(Y,"alt") <- NA
attr(Y,"cntr") <- NA
attr(Y,"stid") <- NA
attr(Y, "history")= history.stamp()
attr(Y,'storm name') <- stormnames[ok]
class(Y) <- c('trajectory','matrix')
plot(Y)
Y[1,]
map(Y)
Y[1,]
imilast.M03[1,]
dim(imilast.M03)
3*12+3
dim(Y)
3*17+3
str(imilast.M03)
plot(imilast.M03)
library(devtools)
install_local('~/git/esd')
library(esd)
ss <- select.station(lon=c(0,30),lat=c(-40,-20))
map(ss)
ss <- select.station(lon=c(20,50),lat=c(-40,-20),nmin=30)
map(ss)
ss <- select.station(lon=c(30,40),lat=c(-40,-25),nmin=30)
map(ss)
ss <- select.station(lon=c(25,40),lat=c(-40,-25),nmin=30)
map(ss)
ss <- select.station(lon=c(25,45),lat=c(-35,-20),nmin=30)
map(ss)
ss <- select.station(lon=c(30,40),lat=c(-30,-5),nmin=30)
map(ss)
ss <- select.station(lon=c(32,40),lat=c(-27,-5),nmin=30)
map(ss)
ss <- select.station(lon=c(31,40),lat=c(-27,-5),nmin=30)
map(ss)
ss <- select.station(lon=c(31,40),lat=c(-27,-5),nmin=30,src='ghcnd',param='tmax')
map(ss)
tmax = station(ss)
tmax <- station(ss)
tmax <- station(lon=c(31,40),lat=c(-27,-5),nmin=30,src='ghcnd',param='tmax')
str(ss)
tmax <- station.ghcnd(ss)
tmax <- station(ss,verbose=TRUE)
ss <- select.station(lon=c(31,40),lat=c(-27,-5),nmin=30,src='ghcnd',param='tmin')
tmin <- station(ss,verbose=TRUE)
ss <- select.station(lon=c(31,40),lat=c(-27,-5),nmin=30,src='ghcnd',param='precip')
precip <- station(ss,verbose=TRUE)
map(ss)
plot(tmax)
z <- coredata(tmax)
z[< < -10] <- NA
z[z < -10] <- NA
z[z > 60] <- NA
z -> coredata(tmax)
plot(tmax)
plot(tmin)
z <- coredata(tmin)
z[z < -10] <- NA
z[z > 60] <- NA
z -> coredata(tmin)
plot(tmin)
ss <- select.station(lon=c(31,40),lat=c(-27,-5),nmin=30,src='ghcnd',param='tmin')
tmin <- station(ss,verbose=TRUE)
z <- coredata(tmin)
z[z < -20] <- NA
z[z > 60] <- NA
z -> coredata(tmin)
plot(tmin)
plot(precip)
save(tmin,tmax,precip,file='~/Desktop/stations.mimoza.rda')
plot(precip)
map(precip,FUN='nv')
dev.new(); map(precip,FUN='nv')
map(precip,FUN='nv')
map(precip,FUN='max')
map(precip,FUN='wetfreq')
map(precip,FUN='wetmean')
library(esd)
library(devtools)
install_github('metno/esd')
source('~/data.local/japan2esd.R')
library(zoo)
install.packages('zoo')
install.packages("zoo")
install.packages("zoo")
install.packages("zoo")
install.packages("zoo")
install.packages("zoo")
install.packages("zoo")
source('~/data.local/japan2esd.R')
names <- read.table('~/data.local/soyamisaki.csv',sep=',',nrow=2)
library(esd)
plot(MU)
source('~/R/inam.station.eval.R')
## Get a time interval with most complete data
Y <- subset(precip.inam,it=c(1951,2000))
FW <- aggregate(subset(Y,it=c('Nov','Dec','Jan','Feb','Mar')),
year,FUN='wetfreq')
MU <- aggregate(subset(Y,it=c('Nov','Dec','Jan','Feb','Mar')),
year,FUN='wetmean')
## Weed out stations with
nv <- apply(MU,2,'nv')
print(summary(nv))
MU <- subset(MU,is=nv > 40)
FW <- subset(FW,is=nv > 40)
## Set 0 frequency to NA
zz <- coredata(FW); zz[zz == 0] <- NA; zz -> coredata(FW)
## Fill in missing data gaps
MU <- pcafill(MU)
FW <- pcafill(FW)
plot(FW,new=FALSE)
plot(MU,new=FALSE)
plot(FW,new=FALSE); grid()
plot(MU,new=FALSE); grid()
pca.fw <- PCA(FW)
pca.mu <- PCA(MU)
SLP <- aggregate(subset(retrieve('~/data.local/slp.mon.mean.nc',
lat=c(-50,50)),
it=c('Nov','Dec','Jan','Feb','Mar')),year)
eof.slp <- EOF(SLP)
ds.fw <- DS(pca.fw,eof.slp)
plot(ds.fw,new=FALSE)
SLP <- aggregate(subset(retrieve('~/data.local/slp.mon.mean.nc',
lon=c(-180,120),lat=c(-30,30)),
it=c('Nov','Dec','Jan','Feb','Mar')),year)
eof.so <- EOF(SLP)
#3 Indian Ocean
SLP <- aggregate(subset(retrieve('~/data.local/slp.mon.mean.nc',
lon=c(20,100),lat=c(-60,0)),
it=c('Nov','Dec','Jan','Feb','Mar')),year)
eof.ind <- EOF(SLP)
ds.fw.so <- DS(pca.fw,eof.so)
plot(ds.fw.so,new=FALSE)
ds.fw.ind <- DS(pca.fw,eof.ind)
plot(ds.fw.ind,new=FALSE)
plot(pca.fw,new=FALSE)
plot(pca.mu,new=FALSE)
corfield(pca.fw,SLP)
map(SLP)
corfield(subset(fw,is=1),SLP)
corfield(subset(FW,is=1),SLP)
attr(FW,'unit') <- 'frequency'
corfield(subset(FW,is=1),SLP)
corfield(subset(FW,is=1),SLP)
y <- subset(precip.inam,is=29)
plot(y)
y <- subset(precip.inam,is=21)
plot(y)
y <- subset(precip.inam,is=19)
plot(y)
nv
loc(precip.inam)
y <- subset(precip.inam,is=70)
plot(y)
y <- subset(precip.inam,is=65)
plot(y)
wheel(y)
vis(y)
cumugram(y)
cumugram(y,FUN='sum')
plot(aggregate(precip,month))
plot(aggregate(precip,month),FUN='sd')
plot(aggregate(precip,month,FUN='sd'))
plot(aggregate(precip,month,FUN='max'))
mao(precip)
map(precip)
plot(precip)
dim(precip)
dim(precip.inam)
loc(precip)
loc(precip.inam)
end(precip)
plot(precip)
plot(precip.inam)
diagram(combine(precip.inam))
diagnose(combine(precip.inam))
end(precip.inam)
diagnose(combine(precip.inam,precip))
PPRE <- combine(precip.inam,precip)
PRE <- PPRE
rm('PPRE')
stid(PRE)
table(loc(PRE))
map(PRE)
map(PRE,FUN='nv')
apply(PRE,2,'nv')
table(src(PRE))
end(precip)
plot(annual(PRE))
plot(annual(PRE),plot.type='multiple')
map(precip.inam,FUN='nv')
shiny::runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
str(meta)
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
loc(precip.inam)
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
fvaL <- function(x) {yrs <- year(x); apply(x,2,function(x,yrs) min(yrs[is.finite(x)]))}
lval <- function(x) {yrs <- year(x); apply(x,2,function(x,yrs) max(yrs[is.finite(x)]))}
fval(precip.inam)
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
fval <- function(x) apply(x,2,function(x,yrs=yrs) min(yrs[is.finite(x)]))
lval <- function(x) apply(x,2,function(x,yrs=yrs) max(yrs[is.finite(x)]))
fval(precip.inam)
x <- precip.inam
yrs <- year(x)
yrs
apply(x,2,function(x,yrs=yrs) min(yrs[is.finite(x)]))
apply(x,2,function(x,yrs=yrs) min(yrs[is.finite(x)]),yrs)
fval <- function(x) apply(x,2,function(x,yrs=yrs) min(yrs[is.finite(x)]),yrs)
lval <- function(x) apply(x,2,function(x,yrs=yrs) max(yrs[is.finite(x)]),yrs)
fval(precip.inam)
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MIMOZA_Mapping_tool_WSE')
runApp('git/esd_Rshiny/MET_Mapping_tool_WSE_v02')
runApp('git/esd_Rshiny/MET_Mapping_tool_WSE_v02')
runApp('git/esd_Rshiny/MET_Mapping_tool_WSE_v02')
rm(list=ls()); gc(reset=TRUE)
runApp('git/esd_Rshiny/MET_Mapping_tool_WSE_v02')
install.packages('shinydashboard')
runApp('git/esd_Rshiny/MET_Mapping_tool_WSE_v02')
runApp('git/esd_Rshiny/MET_Mapping_tool_WSE_v02')

library(esd)
data(Oslo)
plot(Oslo)
data(ferder)
plot(ferder)
install.packages('MapsGoogle')
install.packages('RGoogleMaps')
install.packages('RgoogleMaps')
install.packages('RgoogleMaps')
plot(ferder)
install.package(repos=NULL,'~/Dropbox/R/preciparea_0.981.tar.gz')
install.packages(repos=NULL,'~/Dropbox/R/preciparea_0.981.tar.gz')
Fig2
library(preciparea)
Fig2
fig2
library(devtools)
install_github('brasmus/preciparea')
Fig2
Fig2()
Fig3()
data("Parea")
plot(Parea[1])
plot(Parea[,1])
plot(trend.pval(Parea[,1]))
print(trend.pval(Parea[,1]))
print(trend.pval(annual(Parea[,1])))
ac1(trend.pval(annual(Parea[,1])))
AR1(trend.pval(annual(Parea[,1])))
AR1(annual(Parea[,1]))
AR(annual(Parea[,1]))
x <- annual(Parea[,1])
length(x)
cor(x[1:18],x[2:19])
plot(x)
length(Parea[,1])
cor(Parea[1:6877,1],Parea[2:6878,1])
Fig4()
Fig4() -> z
str(z)
Fig4
Fig3()
data("Parea.cmip5")
dim(Parea.cmip5)
str(Parea.cmip5)
Fig4()
data("global.t2m.cmip5")
dim(global.t2m.cmip5)
install_github('metno/esd')
Parea.cmip5 <- ParaCMIP()
Parea.cmip5 <- PareaCMIP()
Parea.cmip5 <- PareaCMIP()
save(Parea.cmip5,file='~/git/preciparea/data/Parea.cmip5.rda')
q()
library(esd)
data(ferder)
plot(ferder)
source('~/R/esd/demo/ecad2nc4.R')
q()
source('~/R/esd/demo/ecad2nc4.R')
append
source('~/R/esd/demo/ecad2nc4.R')
write2ncdf4(x,fname,tim=seq(as.Date('1900-01-01'),as.Date('2018-02-28'),by=1),stano=stano,append=append,verbose=TRUE)
source('~/R/esd/R/write2ncdf.R')
q()
library(esd)
demo('ecad2nc',ask=FALSE)
demo('ecad2nc4',ask=FALSE)
source('~/R/esd/demo/ecad2nc4.R')
write2ncdf4(x,fname,tim=seq(as.Date('1900-01-01'),as.Date('2018-02-28'),by=1),stano=stano,append=append,verbose=TRUE)
append
append <- FALSE
write2ncdf4(x,fname,tim=seq(as.Date('1900-01-01'),as.Date('2018-02-28'),by=1),stano=stano,append=append,verbose=TRUE)
source('~/git/esd/R/write2ncdf.R')
write2ncdf4(x,fname,tim=seq(as.Date('1900-01-01'),as.Date('2018-02-28'),by=1),stano=stano,append=append,verbose=TRUE)
q()
library(esd)
demo('ecad2nc4',ask=FALSE)
write2ncdf4(x,fname,tim=seq(as.Date('1900-01-01'),as.Date('2018-02-28'),by=1),stano=stano,append=append,verbose=TRUE)
source('~/git/esd/R/write2ncdf.R')
write2ncdf4(x,fname,tim=seq(as.Date('1900-01-01'),as.Date('2018-02-28'),by=1),stano=stano,append=append,verbose=TRUE)
index(y)[1:3]
tim[1:3]
index(x)[1:3]
Q
source('~/git/esd/R/write2ncdf.R')
write2ncdf4(x,fname,tim=seq(as.Date('1900-01-01'),as.Date('2018-02-28'),by=1),stano=stano,append=append,verbose=TRUE)
source('~/git/esd/R/write2ncdf.R')
write2ncdf4(x,fname,tim=seq(as.Date('1900-01-01'),as.Date('2018-02-28'),by=1),stano=stano,append=append,verbose=TRUE)
source('~/git/esd/R/write2ncdf.R')
write2ncdf4(x,fname,tim=seq(as.Date('1900-01-01'),as.Date('2018-02-28'),by=1),stano=stano,append=append,verbose=TRUE)
demo('ecad2nc4',ask=FALSE)
write2ncdf4(x,fname,tim=seq(as.Date('1900-01-01'),as.Date('2018-02-28'),by=1),stano=stano,append=append,verbose=TRUE)
demo('ecad2nc4',ask=FALSE)
q()
library(esd)
demo('ecad2nc4',ask=FALSE)
demo('ecad2nc4',ask=FALSE)
write2ncdf4.station
q()
library(esd)
scatterplot.rainequation()
source('~/git/esd/R/rainequation.R')
scatterplot.rainequation()
source('~/git/esd/R/rainequation.R')
scatterplot.rainequation()
source('~/git/esd/R/rainequation.R')
scatterplot.rainequation()
itr
col
source('~/git/esd/R/rainequation.R')
scatterplot.rainequation()
source('~/git/esd/R/rainequation.R')
scatterplot.rainequation()
scatterplot.rainequation(colour.by = 'stid')
ncid <- nc_open('/thredds/dodsC/metusers/rasmusb/tmin.metnod.nc')
ncid <- nc_open('http://thredds.met.no/thredds/dodsC/metusers/rasmusb/tmin.metnod.nc')
source('~/git/esd/demo/ecad2nc4.R')
source('~/git/esd/demo/ecad2nc4.R')
map(x)
plot(x)
source('~/git/esd/R/write2ncdf.R')
write2ncdf4(x,fname,tim=seq(as.Date('1900-01-01'),as.Date('2018-02-28'),by=1),stano=stano,append=append,verbose=TRUE)
install.packages(repos=NULL,'esd')
library(esd)
sessionInfo()
source('~/R/esd/demo/ecad2nc4.R')
source('~/R/esd/R/write2ncdf.R')
source('~/R/esd/demo/ecad2nc4.R')
number
start
count
ncvar_put( ncid, nvid, number,start=start[2],count=count[2])
class(number)
ncvar_put( ncid, nvid, as.numeric(number),start=start[2],count=count[2])
ncvar_put( ncid, nvid, number
)
ncvar_put( ncid, nvid, c(number),start=start[2],count=count[2])
class(number)
class(as.numeric(number))
class(as.numeric(1.0*number))
ncvar_put( ncid, nvid, 1.0*number,start=start[2],count=count[2])
dim(x)
number <- apply(coredata(x),2,FUN='nv')
number
number <- 1.0*apply(coredata(x),2,FUN='nv')
number
nvid
source('~/R/esd/R/write2ncdf.R')
write2ncdf4(x,fname,tim=seq(as.Date('1900-01-01'),as.Date('2018-02-28'),by=1),stano=stano,append=append,verbose=TRUE)
nvid$prec
ncvar_put( ncid, nvid, 1:6,start=start[2],count=count[2])
ncvar_put( ncid, nvid, number,start=start[2],count=count[2])
ncvar_put( ncid, nvid, round(number/100),start=start[2],count=count[2])
source('~/R/esd/R/write2ncdf.R')
write2ncdf4(x,fname,tim=seq(as.Date('1900-01-01'),as.Date('2018-02-28'),by=1),stano=stano,append=append,verbose=TRUE)
q()
rm(list=ls()); gc(reset=TRUE)
t2m <- station(stid=18700,src='metnod',user='metno')
library(esd)
setwd('R')
t2m <- station(stid=18700,src='metnod',user='metno')
pre <- station(stid=18700,src='metnod',user='metno',param='precip')
mait <- subset(as.monthly(t2m),it='May')
maip <- subset(as.monthly(pre),it='May')
junt <- subset(as.monthly(t2m),it='Jun')
junp <- subset(as.monthly(pre),it='Jun')
plot(junt)
plot(junp)
junp <- subset(as.monthly(pre,FUN='sum'),it='Jun')
plot(junp)
plot(junt/junp)
demo(gst.outlook)
demo(gst.outlook)
shiny::runApp('~/git/esd_Rshiny/metnod')
demo('global.t2m.gcm')
svalbard <- globalmean(path='CMIP5.monthly/rcp85',ref=1971:2000,lon=c(0,40),lat=c(75,82),anomaly=FALSE)
svalbard <- globalmean(path='CMIP5.monthly/rcp85',ref=1971:2000,lon=c(0,40),lat=c(75,82),anomaly=FALSE,plot=FLSE)
svalbard <- globalmean(path='CMIP5.monthly/rcp85',ref=1971:2000,lon=c(0,40),lat=c(75,82),anomaly=FALSE,plot=FALSE)
svalbard <- globalmean(path='CMIP5.monthly/rcp85',ref=1971:2000,lon=c(0,40),lat=c(75,82),anomaly=FALSE)
plot(svalbard)
plot(svalbard,plot.type='single')
plot(svalbard,plot.type='single',col=adjustcolor('blue',0.2))
plot(anomaly(svalbard),plot.type='single',col=adjustcolor('blue',0.2))
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
demo(gst.outlook)
plot(subset(gst,it='Jun'))
plot(subset(gmst,it='Jun'))
plot.zoo(subset(gmst,it='Jun'))
plot.zoo(subset(gmst,it='Jun'),lwd=3,type='b',main='global mean June temperature',ylab=expression(degree*C),xlab='')
grid()
end(subset(gmst,it='Jun'))
sort(subset(gmst,it='Jun'))
str <- order(coredata(subset(gmst,it='Jun')))
subset(gmst,it='Jun')[srt]
index(subset(gmst,it='Jun'))[srt]
index(subset(gmst,it='Jun'))[str]
runApp('~/git/esd_Rshiny/metnod')
install.packages("plotly")
library(plotly)
install.packages("plotly")
library(plotly)
y <- station(18700,src='metnod',user='metno')
library(esd)
y <- station(18700,src='metnod',user='metno')
y <- station(stid=18700,src='metnod',user='metno')
plot_ly(y)
plot_ly(as.dataframe(y))
plot_ly(as.data.frame(y))
plot_ly(as.data.frame(date=index(y),y=coredata(y)),x=~date,y=~y)
plot_ly(data.frame(date=index(y),y=coredata(y)),x=~date,y=~y)
plot_ly(data.frame(date=index(y),y=coredata(y)),x=~date,y=~y,type = 'line')
plot_ly(data.frame(date=index(y),y=coredata(y)),x=~date,y=~y,type = 'scatter')
plot_ly(data.frame(date=index(y),y=coredata(y)),x=~date,y=~y,type = 'scatter',mode='markers')
plot_ly(data.frame(date=index(y),y=coredata(y)),x=~date,y=~y,type = 'scatter',mode='lines')
shiny::runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
breaks = seq(floor(min(y)),ceiling(max(y)),by=bin_size)
bin_size=0.25
breaks = seq(floor(min(y)),ceiling(max(y)),by=bin_size)
pdf <- pnorm(q=breaks,mean=mean(y,na.rm=TRUE),sd=sd(y,na.rm=TRUE))
plot(pdf)
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
input$aspectTS
input$aspectTS
input$aspectTS
runApp('~/git/esd_Rshiny/metnod')
input$aspectTS
input$aspectTS <- 'anomaly'
runApp('~/git/esd_Rshiny/metnod')
statistic
order(statistic)[1:10]
order(statistic,descening=TRUE)[1:10]
order(statistic,descending=TRUE)[1:10]
?order
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
obs <- retrieve('~/Downloads/HadCRUT.4.6.0.0.median.nc',param='temperature_anomaly')
gsd.HadCRUT <- aggregate.area(obs,FUN='sd')
load('gst.HadCRUT4.rda')
mapsd <- map(obs,FUN='sd',plot=FALSE)
sdt <- obs
coredata(sdt)[,] <- map(obs,FUN='sd',plot=FALSE)
image(coredata(sdt))
sdt <- t(obs)
coredata(sdt)[,] <- map(obs,FUN='sd',plot=FALSE)
sdt[,] <- map(obs,FUN='sd',plot=FALSE)
image(sdt)
dim(sdt)
gsd.HadCRUT <- aggregate.area(obs,FUN='sd')
sdt <- t(obs)
sdt[,] <- map(obs,FUN='sd',plot=FALSE)
sdt <- zoo(t(sdt),order.by=index(obs))
sdt <- attrcp(obs,sdt)
class(sdt) <- class(obs)
sdt[!is.finite(coredata(obs))] <- NA
attr(gst.HadCRUT4,'sigma.global') <- gsd.HadCRUT
attr(gst.HadCRUT4,'sigma.period') <- sdt
save(gst.HadCRUT4,X,mapnv,nnh,nsh,nglob,file='gst.HadCRUT4.rda')
plot(sdt)
image(coredata(sdt))
image(coredata(obs))
sum(is.finite(obs))
sum(is.finite(sdt))
sdt[!is.finite(coredata(obs))] <- NA
sum(is.finite(sdt))
dim(sdt)
dim(obs)
good <- is.finite(c(obs))
sum(good)
sdt[good] <- NA
sdt <- zoo(t(sdt),order.by=index(obs))
sdt <- attrcp(obs,sdt)
class(sdt) <- class(obs)
gap <- !is.finite(c(obs))
sdt[gap] <- NA
image(coredata(sdt))
dim(sdt)
dim(obs)
sdt <- zoo(t(sdt),order.by=index(obs))
sdt <- attrcp(obs,sdt)
class(sdt) <- class(obs)
dim(sdt)
sdt <- t(obs); coredata(sdt)[,] <- map(obs,FUN='sd',plot=FALSE)
sdt <- zoo(t(sdt),order.by=index(obs))
sdt <- attrcp(obs,sdt)
class(sdt) <- class(obs)
gap <- !is.finite(c(obs))
sdt[gap] <- NA
sdt <- t(obs); sdt[,] <- map(obs,FUN='sd',plot=FALSE)
sdt <- zoo(t(sdt),order.by=index(obs))
sdt <- attrcp(obs,sdt)
class(sdt) <- class(obs)
gap <- !is.finite(c(obs))
sdt[gap] <- NA
dim(sdt)
image(coredata(sdt))
sdt <- t(obs); sdt[,] <- map(obs,FUN='sd',plot=FALSE)
gap <- !is.finite(c(t(obs)))
sdt[gap] <- NA
sdt <- zoo(t(sdt),order.by=index(obs))
sdt <- attrcp(obs,sdt)
class(sdt) <- class(obs)
image(coredata(sdt))
plot(sdt)
attr(gst.HadCRUT4,'sigma.global') <- gsd.HadCRUT
attr(gst.HadCRUT4,'sigma.period') <- sdt
save(gst.HadCRUT4,X,mapnv,nnh,nsh,nglob,file='gst.HadCRUT4.rda')
plot(attr(gst.HadCRUT4,'sigma.global'),show.map=FALSE,
main='Standard deviation of valid grid box data')
plot(attr(gst.HadCRUT4,'sigma.period'),show.map=FALSE,
main='Mean of the standard deviation of selected grid boxes')
plot(attr(gst.HadCRUT4,'sigma.global'),map.show=FALSE,
main='Standard deviation of valid grid box data')
## Mean of the standard deviations over time of the selected boxes
plot(attr(gst.HadCRUT4,'sigma.period'),map.show=FALSE,
main='Mean of the standard deviation of selected grid boxes')
runApp('~/git/esd_Rshiny/metnod')
source('reinstall.esd.R')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
vari2name <- function(x,vars=c('pre','t2m','tmax','tmin'),
names=c('Precipitation','Daily meantemperature',
'Daily maximum temperature','Daily minimum temperature'),nc=3) {
y <- x
for (i in 1:length(x)) {
y[i] <- names[grep(tolower(substr(x[i],1,nc)),substr(vars[1],1,nc))]
}
y[is.na(y)] <- x[is.na(y)]
return(y)
}
varids <- list.files(path='data',pattern='.nc',full.names = FALSE)
varids <- varids[grep('.nc',varids,fixed=TRUE)]
varids <- substr(varids,1,regexpr('.',varids,fixed=TRUE)-1)
names(varids) <- vari2name(varids)
varids
varids <- c('precip','t2m','tmax','tmin)
')'
')'
varids <- c('precip','t2m','tmax','tmin')
vari2name(varids)
vari2name <- function(x,vars=c('pre','t2m','tmax','tmin'),
names=c('Precipitation','Daily meantemperature',
'Daily maximum temperature','Daily minimum temperature'),nc=3) {
y <- x
for (i in 1:length(x)) {
ii <- grep(tolower(substr(x[i],1,nc)),substr(vars[1],1,nc))
if (length(ii)>0) y[i] <- names[ii]
}
return(y)
}
vari2name(varids)
vari2name <- function(x,vars=c('pre','t2m','tmax','tmin'),
names=c('Precipitation','Daily meantemperature',
'Daily maximum temperature','Daily minimum temperature'),nc=3) {
y <- x
if (length(vars) != length(names)) stop("vars have different length to names in 'variname'")
for (i in 1:length(x)) {
ii <- grep(tolower(substr(x[i],1,nc)),substr(vars,1,nc))
if (length(ii)>0) y[i] <- names[ii]
}
return(y)
}
vari2name(varids)
varnames=rbind(c('Nedbør','Middeltemperatur','Maksimumstemperatur','Minimumstemperatur'),
c('Nedbør','Middeltemperatur','Maksimumstemperatur','Minimumstemperatur'),
c('Precipitation','Daily mean temperature','Daily max temperature','Daily min temperature'))
dim(varnames)
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
runApp('~/git/esd_Rshiny/metnod')
